1.1.1	World osztály teszt
Chunk Loading System Teszt:
Bemeneti adatok
•	Látótávolság
•	Játékos pozíciója
Kimemeti adatok
•	CubicChunk osztály példányai
•	Chunk-ok pozíciói
Működési elv:
1.	Játékos pozíciójának 1 chunk-al való eltolása véletlenszerű irányba
2.	Chunk-ok számának ellenőrzése
a.	Belső kört lefedő chunk-ok <= létező chunk-ok <= külső kört lefedő chunk-ok
3.	Chunk-ok pozícióinak ellenőrzése
a.	Chunk távolsága a játékos chunk-jától <= Külső sugár
1.1.2	ChunkPool osztály tesztek
Lekérés teszt:
Bemeneti adatok
•	Nincs közvetlen bemeneti adat, csak a GetFromPool metódus meghívása
Kimemeti adatok
•	CubicChunk osztály példánya

Működési elv:
1.	GetFromPool metódus meghívása
2.	Visszakapott CubicChunk példány ellenőrzése
3.	Pool-ban lévő chunk-ok számának ellenőrzése
a.	Ha előzőleg X = 0 akkor 0, ha nem akkor hiba
b.	Ha előzőleg X > 0 akkor X – 1, ha nem akkor hiba
c.	Ha a számosság negatív akkor hiba
Visszahelyezés teszt:
Bemeneti adatok
•	ReturnToPool metódus meghívása. Paraméter: CubicChunk osztály példánya.
Kimemeti adatok
•	Nincs közvetlen kimeneti adat
Működési elv:
1.	ReturnToPool metódus meghívása a CubicChunk egyik példányával
2.	Átadott CubicChunk példány megkeresése az inaktív chunk-ok listájában
a.	Ha nincs benne akkor hiba
3.	Pool-ban lévő chunk-ok számának ellenőrzése
a.	Ha előzőleg X akkor X + 1, ha nem akkor hiba
b.	Ha a számosság negatív vagy 0 akkor hiba
1.1.3	CubicChunk osztály teszt
Build teszt:
Bemeneti adatok
•	Build metódus meghívása
•	Chunk pozíciója
Kimemeti adatok
•	Mesh
•	Triangles
•	Vertices

Működési elv:
•	Chunk pozíciójának véletlenszerű elmozgatása a világ határain belül
•	Build metódus meghívása
•	Mesh ellenőrzése
o	0 <= Vertices < 65535, ha nem akkor hiba
o	Vertex-ek száma osztható 3-mal, ha nem akkor hiba
o	háromszögek száma = Vertex-ek száma / 3, ha nem akkor hiba
